package net.lyx.dbframework.dao;

import lombok.AccessLevel;
import lombok.NoArgsConstructor;
import net.lyx.dbframework.core.compose.*;
import net.lyx.dbframework.core.compose.template.CreationTemplate;
import net.lyx.dbframework.core.compose.template.DeletionTemplate;
import net.lyx.dbframework.core.compose.template.InsertionTemplate;
import net.lyx.dbframework.core.compose.template.SearchTemplate;
import net.lyx.dbframework.core.compose.template.collection.PredicatesTemplate;
import net.lyx.dbframework.core.compose.template.collection.SignatureTemplate;
import net.lyx.dbframework.core.compose.template.completed.CompletedQuery;
import net.lyx.dbframework.dao.entity.Element;
import net.lyx.dbframework.dao.entity.Entity;
import net.lyx.dbframework.dao.entity.ExternalElement;

import java.util.ArrayList;
import java.util.List;

@NoArgsConstructor(access = AccessLevel.PACKAGE)
public final class DaoRequestFactory {

    public CompletedQuery prepareContainerCreate(Composer composer, Entity entity) {
        CreationTemplate template = composer.useCreationPattern()
                .entity(StorageType.CONTAINER)
                .name(entity.getName());

        SignatureTemplate signatureTemplate = composer.signature();

        for (Element element : entity.getElements()) {
            List<ParameterAddon> addons = new ArrayList<>();

            if (element.isPrimary())
                addons.add(ParameterAddon.PRIMARY);
            if (element.isFinalized())
                addons.add(ParameterAddon.NOTNULL);
            if (element.isUnique())
                addons.add(ParameterAddon.UNIQUE);
            if (element.isAutoGenerated())
                addons.add(ParameterAddon.INCREMENTING);

            ParameterType parameterType = ParameterType.fromJavaType(element.getType());
            if (parameterType == null) {
                parameterType = ParameterType.BIGINT; // external entity id.
            }

            signatureTemplate.with(CombinedStructs.styledParameter(element.getShortName(),
                    ParameterStyle.builder()
                            .addons(addons)
                            .defaultValue(element.getDefaultValue())
                            .type(parameterType)
                            .build()));
        }

        return template.signature(signatureTemplate.combine())
                .combine();
    }

    public CompletedQuery prepareDelete(Composer composer, String name, EntityAccessCondition condition) {
        DeletionTemplate template = composer.useDeletionPattern()
                .container(name);

        PredicatesTemplate predicatesTemplate = composer.predicates();

        for (CombinedStructs.CombinedField combinedField : condition.getFields()) {
            predicatesTemplate.ifMatches(combinedField).and();
        }

        return template.predicates(predicatesTemplate.combine())
                .combine();
    }

    public List<CompletedQuery> prepareInserts(TypedEntityDao<?> dao, Composer composer, String name, Entity entity) {
        List<CompletedQuery> list = new ArrayList<>();
        InsertionTemplate template = composer.useInsertionPattern()
                .container(name);

        for (Element element : entity.getElements()) {
            Object value = element.getValue();

            if (!element.isAutoGenerated()) {
                if (value instanceof ExternalElement) {

                    ExternalElement externalElement = (ExternalElement) value;
                    Entity foreignEntity = externalElement.getForeignEntity();

                    List<CompletedQuery> externalQueries = new ArrayList<>();

                    externalQueries.add(prepareContainerCreate(composer, foreignEntity)); // todo - надо будет кешировать это
                    externalQueries.addAll(prepareInserts(dao, composer, foreignEntity.getName(), foreignEntity));

                    value = foreignEntity.getKey().getValue();

                    if (Long.parseLong(value.toString()) <= 0) {
                        value = dao.insertMono(externalQueries);
                    }
                    else {
                        list.addAll(externalQueries);
                    }
                }

                template.withValue(CombinedStructs.field(element.getShortName(), value));
            }
        }

        list.add(template.combine());
        return list;
    }

    public CompletedQuery prepareSearch(Composer composer, String name, EntityAccessCondition condition, int limit) {
        SearchTemplate template = composer.useSearchPattern()
                .container(name)
                .subjects(composer.subjects().selectAll().combine());

        if (limit > 0) {
            template.limit(limit);
        }

        if (condition != null) {
            PredicatesTemplate predicatesTemplate = composer.predicates();

            for (CombinedStructs.CombinedField combinedField : condition.getFields()) {
                predicatesTemplate.ifMatches(combinedField).and();
            }

            template.predicates(predicatesTemplate.combine());
        }

        return template.combine();
    }
}
